# do sudo, or sudo the last command if no argument given
function s() {
    if [[ $# == 0 ]]; then
        sudo $(history -p '!!')
    else
        sudo "$@"
    fi
}

# Create and cd into directory
function ccd() {
    mkdir -p $1 && cd $1
}

# Compress ALL THE THINGS
function compress() {
    if [ $1 ] ; then
        case $1 in
            tbz)   	tar cjvf $2.tar.bz2 $2      ;;
            tgz)   	tar czvf $2.tar.gz  $2      ;;
            tar)  	tar cpvf $2.tar  $2         ;;
            bz2)	bzip $2             ;;
            gz)		gzip -c -9 -n $2 > $2.gz    ;;
            zip)   	zip -r $2.zip $2    ;;
            7z)    	7z a $2.7z $2               ;;
            *)     	echo "'$1' cannot be packed via pk()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Extract ALL THE THINGS!
function extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjf $1        ;;
            *.tar.gz)         tar xzf $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xf $1         ;;
            *.tbz2)           tar xjf $1        ;;
            *.tgz)            tar xzf $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Implement tree if it doesn't exist
function tree () {
    if [[ $# == 0 ]]; then
      find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
    else
      find $@ -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
    fi
}

export MARKPATH=$HOME/.marks
function jump {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark {
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark {
    rm -i "$MARKPATH/$1"
}
function marks {
    \ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}
function m {
    if [[ $# == 0 ]]; then
        marks
    else
        mark $@
    fi
}
function j {
    if [[ $# == 0 ]]; then
        marks
    else
        j $@
    fi
}

function _jump {
    local cur=${COMP_WORDS[COMP_CWORD]}
    local marks=$(find $MARKPATH -type l | awk -F '/' '{print $NF}')
    COMPREPLY=($(compgen -W '${marks[@]}' -- "$cur"))
    return 0
}
complete -o default -o nospace -F _jump jump
complete -o default -o nospace -F _jump j
